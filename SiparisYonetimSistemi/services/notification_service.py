#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Bildirim sistemi sÄ±nÄ±flarÄ±.
Observer Design Pattern kullanÄ±lmÄ±ÅŸtÄ±r.
"""

from abc import ABC, abstractmethod
from datetime import datetime

class NotificationObserver(ABC):
    """
    Bildirim gÃ¶zlemcisi iÃ§in soyut sÄ±nÄ±f.
    Observer pattern'deki Observer rolÃ¼nÃ¼ Ã¼stlenir.
    """
    
    @abstractmethod
    def update(self, order, message):
        """
        Yeni bir bildirim geldiÄŸinde Ã§aÄŸrÄ±lÄ±r.
        
        Args:
            order: Bildirimle ilgili sipariÅŸ
            message: Bildirim mesajÄ±
        """
        pass


class EmailNotification(NotificationObserver):
    """
    E-posta bildirimi sÄ±nÄ±fÄ±.
    """
    
    def update(self, order, message):
        """
        E-posta bildirimi gÃ¶nderir.
        
        Args:
            order: Bildirimle ilgili sipariÅŸ
            message: Bildirim mesajÄ±
        """
        customer = order.customer
        print(f"ğŸ“§ E-posta gÃ¶nderiliyor: {customer.email} - Konu: SipariÅŸ #{order.order_id} GÃ¼ncelleme")
        print(f"   Ä°Ã§erik: {message}")


class SMSNotification(NotificationObserver):
    """
    SMS bildirimi sÄ±nÄ±fÄ±.
    """
    
    def update(self, order, message):
        """
        SMS bildirimi gÃ¶nderir.
        
        Args:
            order: Bildirimle ilgili sipariÅŸ
            message: Bildirim mesajÄ±
        """
        customer = order.customer
        if customer.phone:
            print(f"ğŸ“± SMS gÃ¶nderiliyor: {customer.phone}")
            print(f"   Ä°Ã§erik: SipariÅŸ #{order.order_id} - {message}")


class PushNotification(NotificationObserver):
    """
    Mobil uygulama push bildirimi sÄ±nÄ±fÄ±.
    """
    
    def update(self, order, message):
        """
        Push bildirimi gÃ¶nderir.
        
        Args:
            order: Bildirimle ilgili sipariÅŸ
            message: Bildirim mesajÄ±
        """
        customer = order.customer
        print(f"ğŸ“² Push bildirimi gÃ¶nderiliyor: KullanÄ±cÄ± #{customer.customer_id}")
        print(f"   Ä°Ã§erik: SipariÅŸ #{order.order_id} - {message}")


class NotificationService:
    """
    Bildirim servisi.
    Observer pattern'deki Subject rolÃ¼nÃ¼ Ã¼stlenir.
    """
    
    def __init__(self):
        """
        Bildirim servisi oluÅŸturur.
        """
        self.__observers = []
        
        # VarsayÄ±lan gÃ¶zlemcileri ekle
        self.add_observer(EmailNotification())
        self.add_observer(SMSNotification())
    
    def add_observer(self, observer):
        """
        Bildirim gÃ¶zlemcisi ekler.
        
        Args:
            observer: Eklenecek gÃ¶zlemci
        """
        if observer not in self.__observers:
            self.__observers.append(observer)
    
    def remove_observer(self, observer):
        """
        Bildirim gÃ¶zlemcisini Ã§Ä±karÄ±r.
        
        Args:
            observer: Ã‡Ä±karÄ±lacak gÃ¶zlemci
        """
        if observer in self.__observers:
            self.__observers.remove(observer)
    
    def send_order_notification(self, order, message):
        """
        SipariÅŸ ile ilgili bildirim gÃ¶nderir.
        
        Args:
            order: SipariÅŸ nesnesi
            message: Bildirim mesajÄ±
        """
        # Bildirim gÃ¶nderme zamanÄ±
        timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        # Bildirim mesajÄ±nÄ± geniÅŸlet
        full_message = f"[{timestamp}] {message}"
        
        # TÃ¼m gÃ¶zlemcilere bildir
        for observer in self.__observers:
            observer.update(order, full_message)
    
    def notify_all(self, order, status_message):
        """
        TÃ¼m bildirim kanallarÄ±na durum deÄŸiÅŸikliÄŸi mesajÄ± gÃ¶nderir.
        
        Args:
            order: SipariÅŸ nesnesi
            status_message: Durum deÄŸiÅŸikliÄŸi mesajÄ±
        """
        self.send_order_notification(order, status_message) 